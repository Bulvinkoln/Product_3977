# Инструкция для работы с Git и удалёнными репозиториями
## Что такое Git?
Git - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.
## Что такое репозиторий?
Репозиторий - хранилище файлов, поддерживающих версионность.
## Подготовка репозитория
Для создание репозитория необходимо выполнить команду *git init* в выбранной папке, после  появится скрытая папка с расширенем .git.
> Каждая точка сохранения файла носит название коммит (commit). У каждого коммита есть уникальный идентификатор (hash) и комментарий. Из коммитов собирается ветка (история изменений). У ветки может быть своё наименование. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них.
## Что такое удаленный репозиторий?
Удаленный репозиторий – это версии  проекта, сохраненные на удаленном сервере. Доступ к репозиторию на таком сервере может осуществляться по интернету или по локальной сети.
## Подготовка удаленного репозитория
Команда *git remote add <название удаленного репозитория> <ссылка на удаленный репозиторий>* подключает удаленный репозиторий к вашему под переданным именем.
> Cсылку на удаленный репозиторий можно взять, нажав на большую зеленую кнопку Code на странице репозитория на GitHub.
## Основные команды Git
- ### Git init
Для нициализаций локального репозитория используется команда *git init*.
- ### Git status
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. 
- ### Git add
Для добавления файлов используется команда *git add <имя файла>*.
- ### Git commit
Для того, чтобы создать коммит (сохранение) необходимо выполнить команду *git commit -m "сообщение к коммиту"*. Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту оставлять ***ОБЯЗАТЕЛЬНО***.
- ### Git checkout
Команда *git checkout <номер коммита>* используется для перемещения между коммитами.
- ### Git checkout master
Команда *git checkout master* используется для возвращения к актуальному состояню и продолжению работы.
- ### Git log
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*.
- ### Git diff
Команда *git diff* позволяет увидеть разницу между текущим и законченным файлом.
## Ветки в Git
- ### Git branch 
Для того, чтобы создать ветку, используется команда *git branch <название новой ветки>*.
- ### Git branch -d
Для удаления ветки ввести команду *git branch -d <название ветки>*.
- ### Git merge
Для того чтобы добавить ветку в текущую ветку используется команда *git merge <название ветки>*.
- ### Git checkout 
Команда *git checkout <название ветки>* используется для перемещения на указанную ветку.
- ### Git checkout -b
Для того, чтобы создать ветку, используется команда *git branch -b <название новой ветки>*.
> При создании новой ветки c использованием команды *git checkout -b <название новой ветки>* вы сразу переместитесь в создаваемую ветку, а при использовании команды *git branch <название новой ветки>* останетесь на текущей ветке.
## Команды удаленного репозитория
- ### Git clone <ссылка на удаленный репозиторий>
Клонирует переданный репозиторий на ваш компьютер.
- ### Git pull
Получает изменения из переданного удаленного репозитория и обновляет рабочую копию в соответствии с удаленным репозиторием.
- ### Git push
Загружает изменения в удаленный репозиторий.
## Дополнительно:
- Статья про папки, репозиторий и некотрые сложности при освоении контроля версий: https://gb.ru/posts/soveti-pro-git
- Образовательный курс по Git: https://gb.ru/courses/1117